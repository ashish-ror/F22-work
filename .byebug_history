c
groups.find_by(name: group_name)
c
Group.first.person_groups
group
PersonGroup
Group.find_by(name: group_name)
group_name
Group.first
Group.all.count
Group.all.cont
self.class
groups.count
c
group.persons.map{|record| record.id.to_s}
group.persons.each{|record| record.id.to_s}
group.persons.each{|record| record.id.to_s
group.persons.count
group.persons.each{|record| record.id.to_s}.include?(self.id.to_s)
c
self.id.to_s
@group.owner_id
n
groups.find_by(name: name)
name
name'
 groups.count
c
Time.now.end_of_week
Time.now.beginning_of_week
Time.now.begining_of_week
Event.delete_all
Event.uniq.delete_all
Event.uniq
starts_at
 (Event.published_last.starts_at..Event.published_last.ends_at)
starts_at === (Event.published_last.starts_at..Event.published_last.ends_at)
c
 (Event.published_last.starts_at..Event.published_last.ends_at)
starts_at === (Event.published_last.starts_at..Event.published_last.ends_at)
starts_at === (Event.published_last.starts_at..Event.published_last.ends_at
Event.published_last.ends_at
Event.published_last.starts_at
starts_at
c
reload!
Event.published_last.starts_at
c
Event.published_last.starts_at
c
self.save
self
self.published_at = DateTime.current
c
published_at = Time.current
published_at 
c
self.events
self
self.save
event
a.errors
a=event.save
event.save
event.count = persons_count.join().to_i + 1
 event.count
event = self.events.find(eventid)
c
CustomerEvent.all
@customer_event
a.errors
a=@customer_event.save
@customer_event.save
@customer_event = self.customer_events.build(event_id: eventid, customer_id: id)
 self.events.find(eventid).count = persons_count.join().to_i + 1
 self.events.find(eventid)
c
 self.events.find(eventid)
c
CustomerEvent.create(event_id: 2, customer_id: 1)
reload!
CustomerEvent.create(event_id: 2, customer_id: 1)
a.errors
a=CustomerEvent.create(event_id: 2, customer_id: 1)
CustomerEvent.create(event_id: 2, customer_id: 1)
CustomerEvent
Customer.find(1)
Event.find(2)
Event.all
Event.find(1)
persons_count.join().to_i + 1
self.events.find(eventid)
self.events.find(event_id)
self.events
c
reload!
self.events
c
reload!
self.events
self
c
rsvp_ends_at > starts_at
c
errors.add(:base, 'rsvp should end before event starts') unless (rsvp_ends_at < starts_at)
errors.add(:base, 'rsvp should end before event starts') unless rsvp_ends_at < starts_at
starts_at
 rsvp_ends_at
a
c
Event.published_last.starts_at + 7.days > starts_at
c
Event.published_last.present?
Event.published_last
Event.published_last.starts_at + 7.days > starts_at
c
Event.published_last.present? 
D!!Event.published_last 
!Event.published_last 
Event.published_last 
Event.published_last and Event.published_last.try(:starts_at) + 7.days 
Event.published_last and Event.published_last.starts_at 
Event.published_last 
Event.published_last and Event.published_last.starts_at + 7.days 
Event.published_last and Event.published_last.starts_at + 7.days > self.starts_at
Event.published_last and Event.published_last.starts_at + 7.days > starts_at
c
Event.published_last.ends_at
Event.published_last
c
Event.published_last
c
Event.published.last
Event.published.last.starts_at
3.year
3.years
3.days
Event.published.last
self
Event.published.last.try(:starts_at).to_i 
Event.published.last.try(:starts_at).to_i + 7 > self.starts_at.to_i
Event.published.last.starts_at + 7.days > self.starts_at
Event.published.last.try(:ends_at).to_i> self.starts_at.to_i
Event.published.last.try(:ends_at)> self.starts_at
Event.published.last.try(:ends_at)
Event.published.last.ends_at
Event.published
self.starts_at
self
